// Работа  с Api
// Работа со строками:
// String.Builder() - 
// Функционал стринг:
// contant(): объединение строкам
// valueOf(): преобразаует Object в строковое представление( завязан на toString)
// join(): объединяет набор строк в одну с учетом разделителя
// charAt(): получение символа по индексу
// indexOf(): первый индекс вхождения подстроки
// lastIndexOf(): последний индекс вхождения строкам
// startsWith()/endsWith(): определяет, начинается/заканчивается ли строка с подстроки
// replace(): замена одной подстроки на другую
// trim(): удаляет начальные и конечные пробелы
// substring(): возвращает подстроку, см. аргументы
// toLowerCase()/toUpperCase: возвращает новую строку в верхнем/нижнем регистре
// compareTo(): сравнивает две строкам
// equals(): сравнивает строки с учетом регистра
// equalsIgnoreCase(): сравнивает строки без учета регистра
// regionMatches(): сравнивает подстроки в строках

// Strind VS String.Builder()
// много изменений - String
// много преобразований - String.Builder()

// ------------
// работа с файловой системой
// File<имя> = new File(<исходный путь к файлу>)
// File f1 = new File("File.txt")
// File f2 = new File("/User/sk/vscode/java/file.txt")
// Ошибки_- Неверный путь. Отсутствие папки. Отстуствие папки. Отсутствие файла. Файл пустой. Файл бит. Файл неверного типа
// try{
//     код в котором может появиться ошибка
// } catch (Exseption e){
//     обработка, если ошибка случилась
// }
// finally {
//     код, который выполнится в любом случае
// }

// функционал Файлы:
// isHidden(): возвращает истину, если каталог или файл является скрытым
// lenght(): возвращает размер файла в байтах
// lastModified(): возвращает время последнего изменения файла или каталога
// list(): возвращает массив файлов и подкаталогов.ю которые находятся в каталоге
// listFiles(): возвращает массив файлов и подкаталогов, которые находятся в определенном каталоге
// mkdir(): создает новый каталог
// renameTo(File dest): переименовывает файл или каталог

// бинарные файлы или двоичные - содержат в себе биты, которые нужно преобразовать, чтобы получить информацию.


// ----------
// Логирование.
// Суть - для отладки. 
// Использование: 
// Logger logger = Logger.getLogger()
// уровни важности:
// INFO, DEBUG, ERROR, WARNING и др
// Вывод:
// ConsoleHandler info = new ConsoleHandler(); // для вывода в консоль
// FileHandler fh = new FileHandler("log.xml") //для вывода в файл
// log.addHandler(info);

// формат вывода: структурированный, абы как*
// XMLFormatter, SimpleFormatter
// fh.setFormatter(xml) //зависимоть от файла






package Lesson;

public class sem2 {
    
}
